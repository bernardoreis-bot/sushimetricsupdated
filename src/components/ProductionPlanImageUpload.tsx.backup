import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { Camera, Upload, CheckCircle, AlertCircle, Loader, Info, TrendingUp, XCircle, RefreshCw, AlertTriangle, Key, Settings } from 'lucide-react';
import { batchMatchWithOCR, generateMatchingSummary, type LearnedMapping, type AdvancedMatchResult } from '../utils/advancedMatcher';
import { performFallbackOCR } from '../utils/fallbackOCR';
import { parseSalesDataFile, mergeSalesData, calculateReducedPriceMapping, type SalesDataItem, type ParsedSalesData } from '../utils/salesDataParser';
import { matchProductionItems, type ProductionMatch } from '../utils/productionItemMatcher';
import ProductionResults from './ProductionResults';
import OpenAISetupWizard from './OpenAISetupWizard';

interface Site {
  id: string;
  name: string;
}

interface Product {
  id: string;
  name: string;
  price: number;
}

export default function ProductionPlanImageUpload() {
  const [sites, setSites] = useState<Site[]>([]);
  const [selectedSite, setSelectedSite] = useState('');
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingStage, setProcessingStage] = useState('');
  const [progress, setProgress] = useState(0);
  const [error, setError] = useState('');
  const [errorCode, setErrorCode] = useState('');
  const [errorSolution, setErrorSolution] = useState('');
  const [errorTechnical, setErrorTechnical] = useState('');
  const [usedFallback, setUsedFallback] = useState(false);
  const [products, setProducts] = useState<Product[]>([]);
  const [learnedMappings, setLearnedMappings] = useState<LearnedMapping[]>([]);
  const [ocrText, setOcrText] = useState('');
  const [matchResults, setMatchResults] = useState<AdvancedMatchResult[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [diagnosticLog, setDiagnosticLog] = useState<string[]>([]);
  const [showSetupWizard, setShowSetupWizard] = useState(false);
  const [openaiConfigured, setOpenAIConfigured] = useState(false);
  const [checkingOpenAI, setCheckingOpenAI] = useState(true);
  const [salesFiles, setSalesFiles] = useState<{week1?: File, week2?: File, week3?: File}>({});
  const [salesData, setSalesData] = useState<ParsedSalesData | null>(null);
  const [productionMatches, setProductionMatches] = useState<ProductionMatch[]>([]);
  const [parsingSales, setParsingSales] = useState(false);

  useEffect(() => {
    loadSites();
    loadProducts();
    loadLearnedMappings();
    checkOpenAIConfig();
  }, []);

  const checkOpenAIConfig = async () => {
    setCheckingOpenAI(true);
    try {
      const { data } = await supabase
        .from('app_settings')
        .select('setting_value')
        .eq('setting_key', 'openai_api_key')
        .maybeSingle();

      if (data?.setting_value && data.setting_value.length > 10) {
        setOpenAIConfigured(true);
        addDiagnosticLog('OpenAI API key found in configuration');
      } else {
        setOpenAIConfigured(false);
        addDiagnosticLog('OpenAI API key not configured');
      }
    } catch (error) {
      console.error('Error checking ChatGPT config:', error);
      setOpenAIConfigured(false);
    } finally {
      setCheckingOpenAI(false);
    }
  };

  const loadSites = async () => {
    const { data } = await supabase
      .from('sites')
      .select('id, name')
      .order('name');

    if (data) {
      setSites(data);
      if (data.length > 0) {
        setSelectedSite(data[0].id);
      }
    }
  };

  const loadProducts = async () => {
    const { data } = await supabase
      .from('products')
      .select('id, name, price')
      .order('name');

    if (data) {
      setProducts(data);
    }
  };

  const loadLearnedMappings = async () => {
    const { data } = await supabase
      .from('production_plan_learned_mappings')
      .select('*')
      .order('times_used', { ascending: false });

    if (data) {
      setLearnedMappings(data);
    }
  };

  const addDiagnosticLog = (message: string) => {
    setDiagnosticLog(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${message}`]);
    console.log('[Diagnostic]', message);
  };

  const clearError = () => {
    setError('');
    setErrorCode('');
    setErrorSolution('');
    setErrorTechnical('');
    setDiagnosticLog([]);
    setUsedFallback(false);
  };

  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('Please select a valid image file');
        addDiagnosticLog(`Error: Invalid file type - ${file.type}`);
        return;
      }
      setImageFile(file);
      setImagePreview(URL.createObjectURL(file));
      clearError();
      addDiagnosticLog(`Image selected: ${file.name} (${(file.size / 1024).toFixed(2)} KB)`);
    }
  };

  const handleSalesFileSelect = async (weekKey: 'week1' | 'week2' | 'week3', file: File | null) => {
    if (!file) {
      setSalesFiles(prev => {
        const newFiles = { ...prev };
        delete newFiles[weekKey];
        return newFiles;
      });
      return;
    }

    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {
      setError('Please select a valid Excel file (.xlsx or .xls)');
      return;
    }

    setSalesFiles(prev => ({  ...prev, [weekKey]: file }));
    addDiagnosticLog(`Sales data file ${weekKey} selected: ${file.name}`);
  };

  const parseSalesData = async () => {
    const files = Object.values(salesFiles).filter(f => f !== undefined) as File[];

    if (files.length === 0) {
      setError('Please upload at least one sales data file');
      return;
    }

    setParsingSales(true);
    addDiagnosticLog(`Parsing ${files.length} sales data file(s)...`);

    try {
      const week1Data = salesFiles.week1 ? await parseSalesDataFile(salesFiles.week1, 'week1') : undefined;
      const week2Data = salesFiles.week2 ? await parseSalesDataFile(salesFiles.week2, 'week2') : undefined;
      const week3Data = salesFiles.week3 ? await parseSalesDataFile(salesFiles.week3, 'week3') : undefined;

      const merged = mergeSalesData(week1Data, week2Data, week3Data);
      setSalesData(merged);

      addDiagnosticLog(`Parsed ${merged.totalItems} total items (${merged.uniqueItems.length} unique) from ${merged.weeks} week(s)`);
      setError('');
    } catch (err) {
      setError(`Failed to parse sales data: ${err instanceof Error ? err.message : 'Unknown error'}`);
      addDiagnosticLog(`Sales data parsing failed: ${err}`);
    } finally {
      setParsingSales(false);
    }
  };

  const processWithFallback = async () => {
    if (!imageFile) {
      setError('No image file selected');
      addDiagnosticLog('Error: No image file provided');
      return;
    }

    setIsProcessing(true);
    clearError();
    setProgress(10);
    setShowResults(false);
    addDiagnosticLog('Starting fallback OCR with Tesseract...');

    try {
      setProcessingStage('Processing with Tesseract OCR (fallback)...');
      setProgress(30);
      setUsedFallback(true);

      const fallbackResult = await performFallbackOCR(imageFile);

      addDiagnosticLog(`Tesseract OCR complete. Confidence: ${fallbackResult.confidence}%`);
      addDiagnosticLog(`Extracted ${fallbackResult.items.length} items`);

      setOcrText(fallbackResult.text);
      setProgress(60);

      setProcessingStage('Matching items with inventory...');
      const productNames = products.map(p => p.name);
      const matches = batchMatchWithOCR(
        fallbackResult.items,
        productNames,
        learnedMappings,
        85
      );

      setMatchResults(matches);
      addDiagnosticLog(`Matched ${matches.filter(m => !m.needsReview).length}/${matches.length} items`);
      setProgress(80);

      setProcessingStage('Saving results...');
      const { data: user } = await supabase.auth.getUser();

      await supabase.from('production_plan_uploads').insert({
        site_id: selectedSite,
        uploaded_by: user.user?.id,
        image_url: imagePreview,
        ocr_results: fallbackResult.items,
        match_results: matches,
        status: 'completed',
        processing_method: 'tesseract_fallback'
      });

      setProgress(100);
      setProcessingStage('Complete!');
      setShowResults(true);
      addDiagnosticLog('Processing completed successfully with fallback OCR');

    } catch (err) {
      console.error('Fallback OCR error:', err);
      setError('Even fallback OCR failed. Please try with a clearer image.');
      setErrorSolution('Take a new photo with better lighting and less blur');
      setErrorTechnical(err instanceof Error ? err.message : String(err));
      addDiagnosticLog(`Fallback OCR failed: ${err instanceof Error ? err.message : String(err)}`);
    } finally {
      setIsProcessing(false);
      setProgress(0);
      setProcessingStage('');
    }
  };

  const processImage = async () => {
    if (!imageFile || !selectedSite) {
      setError('Please select an image and site');
      addDiagnosticLog('Error: Missing image or site selection');
      return;
    }

    if (!openaiConfigured) {
      setError('OpenAI API key is not configured');
      setErrorCode('OPENAI_KEY_MISSING');
      setErrorSolution('Please configure your OpenAI API key using the "Setup OpenAI API" button above, or use the Fallback OCR option.');
      setErrorTechnical('No API key found in app_settings table');
      addDiagnosticLog('Cannot process: OpenAI API key not configured');
      return;
    }

    setIsProcessing(true);
    clearError();
    setProgress(0);
    setShowResults(false);
    addDiagnosticLog('Starting OpenAI GPT-4 Vision processing...');

    try {
      setProcessingStage('Verifying OpenAI API connection...');
      setProgress(10);
      addDiagnosticLog('Checking OpenAI API connectivity...');

      const formData = new FormData();
      formData.append('image', imageFile);

      const apiUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/process-production-image`;
      const { data: { session } } = await supabase.auth.getSession();

      addDiagnosticLog(`Sending image to OpenAI API (${(imageFile.size / 1024).toFixed(2)} KB)`);

      setProcessingStage('Analyzing image with OpenAI GPT-4 Vision...');
      setProgress(30);

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${session?.access_token}`,
        },
        body: formData
      });

      const result = await response.json();

      if (!result.success) {
        addDiagnosticLog(`OpenAI API failed: ${result.errorCode} - ${result.error}`);
        addDiagnosticLog(`Technical: ${result.technical}`);

        setError(result.error);
        setErrorCode(result.errorCode);
        setErrorSolution(result.solution);
        setErrorTechnical(result.technical);

        if (result.useFallback) {
          addDiagnosticLog('ChatGPT failed. Fallback OCR is available.');
        }

        setIsProcessing(false);
        return;
      }

      addDiagnosticLog(`OpenAI GPT-4 Vision extracted ${result.itemCount} items in ${result.processingTime}ms`);
      addDiagnosticLog(`Attempts needed: ${result.attempts}`);

      const extractedItems = result.items || [];
      setOcrText(JSON.stringify(extractedItems, null, 2));

      if (!salesData) {
        setError('Please upload and parse sales data before processing images');
        setIsProcessing(false);
        return;
      }

      setProcessingStage('Matching items with PowerBI sales data...');
      setProgress(60);

      const priceMap = calculateReducedPriceMapping(salesData);
      const matches = matchProductionItems(extractedItems, salesData.uniqueItems, priceMap, 85);

      setProductionMatches(matches);
      addDiagnosticLog(`Matched ${matches.filter(m => m.status === 'matched').length}/${matches.length} items with PowerBI data`);
      setProgress(80);

      setProcessingStage('Saving results...');
      const { data: user } = await supabase.auth.getUser();

      await supabase.from('production_plan_uploads').insert({
        site_id: selectedSite,
        uploaded_by: user.user?.id,
        image_url: imagePreview,
        ocr_results: extractedItems,
        match_results: matches,
        status: 'completed',
        processing_method: 'openai',
        sales_data_weeks: salesData.weeks,
        sales_data_items: salesData.uniqueItems.length
      });

      setProgress(100);
      setProcessingStage('Complete!');
      setShowResults(true);
      addDiagnosticLog('Processing completed successfully with OpenAI GPT-4 Vision');

    } catch (err) {
      console.error('Processing error:', err);
      const errorMsg = err instanceof Error ? err.message : 'Failed to process image';
      setError(errorMsg);
      setErrorSolution('Try using the fallback OCR option below, or re-upload with a clearer image');
      setErrorTechnical(String(err));
      addDiagnosticLog(`Unexpected error: ${errorMsg}`);
    } finally {
      setIsProcessing(false);
      setProgress(0);
      setProcessingStage('');
    }
  };

  return (
    <div className="p-8">
      <div className="max-w-7xl mx-auto">
        <div className="bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl shadow-lg p-8 mb-8 text-white">
          <div className="flex items-center gap-4 mb-4">
            <div className="bg-white/20 p-3 rounded-lg">
              <Camera className="w-8 h-8" />
            </div>
            <div>
              <h1 className="text-3xl font-bold">Production Plan Image Upload (BETA)</h1>
              <p className="text-blue-100 mt-1">AI-powered image recognition for faster production planning</p>
            </div>
          </div>

          <div className="bg-white/10 rounded-lg p-4 mt-6 border border-white/20">
            <div className="flex items-start gap-3">
              <Info className="w-5 h-5 flex-shrink-0 mt-0.5" />
              <div className="text-sm">
                <p className="font-semibold mb-2">How This Works:</p>
                <ul className="space-y-1 text-blue-100">
                  <li>1. Upload up to 3 weeks of sales data (Excel files) to extract PowerBI items</li>
                  <li>2. Upload a photo of your production plan (table with products and quantities)</li>
                  <li>3. OpenAI GPT-4 Vision extracts all items with perfect accuracy</li>
                  <li>4. Items are matched with PowerBI sales data showing variations and pricing</li>
                  <li>5. Review matches and see estimated production costs based on reduced pricing</li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        {showSetupWizard && (
          <OpenAISetupWizard
            onComplete={() => {
              setShowSetupWizard(false);
              checkOpenAIConfig();
            }}
          />
        )}

        <div className="mb-6 bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className={`p-3 rounded-lg ${openaiConfigured ? 'bg-green-100' : 'bg-amber-100'}`}>
                <Key className={`w-6 h-6 ${openaiConfigured ? 'text-green-600' : 'text-amber-600'}`} />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900">OpenAI API Status</h3>
                {checkingOpenAI ? (
                  <p className="text-sm text-gray-600 flex items-center gap-2">
                    <Loader className="w-4 h-4 animate-spin" />
                    Checking configuration...
                  </p>
                ) : openaiConfigured ? (
                  <p className="text-sm text-green-600 flex items-center gap-2">
                    <CheckCircle className="w-4 h-4" />
                    Configured and ready
                  </p>
                ) : (
                  <p className="text-sm text-amber-600 flex items-center gap-2">
                    <AlertTriangle className="w-4 h-4" />
                    Not configured - Fallback OCR only
                  </p>
                )}
              </div>
            </div>

            {!openaiConfigured && (
              <button
                onClick={() => setShowSetupWizard(true)}
                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors flex items-center gap-2"
              >
                <Settings className="w-5 h-5" />
                Setup OpenAI API
              </button>
            )}

            {openaiConfigured && (
              <button
                onClick={() => setShowSetupWizard(true)}
                className="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold rounded-lg transition-colors flex items-center gap-2"
              >
                <Settings className="w-5 h-5" />
                Update API Key
              </button>
            )}
          </div>
        </div>

        {error && (
          <div className="mb-6 bg-red-50 border border-red-200 rounded-xl shadow-sm overflow-hidden">
            <div className="p-6">
              <div className="flex items-start gap-4">
                <div className="flex-shrink-0">
                  <XCircle className="w-8 h-8 text-red-600" />
                </div>
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-red-900 mb-2">Processing Failed</h3>
                  <p className="text-red-800 font-medium mb-3">{error}</p>

                  {errorCode && (
                    <div className="bg-red-100 border border-red-200 rounded-lg p-3 mb-3">
                      <p className="text-sm font-semibold text-red-900 mb-1">Error Code: {errorCode}</p>
                      {errorTechnical && (
                        <p className="text-xs text-red-700 font-mono">{errorTechnical}</p>
                      )}
                    </div>
                  )}

                  {errorSolution && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                      <div className="flex items-start gap-2">
                        <Info className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
                        <div>
                          <p className="text-sm font-semibold text-blue-900 mb-1">Solution:</p>
                          <p className="text-sm text-blue-800">{errorSolution}</p>
                        </div>
                      </div>
                    </div>
                  )}

                  <div className="flex gap-3">
                    <button
                      onClick={processImage}
                      disabled={isProcessing || !imageFile}
                      className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 text-white rounded-lg transition-colors"
                    >
                      <RefreshCw className="w-4 h-4" />
                      Retry with OpenAI
                    </button>

                    <button
                      onClick={processWithFallback}
                      disabled={isProcessing || !imageFile}
                      className="flex items-center gap-2 px-4 py-2 bg-orange-600 hover:bg-orange-700 disabled:bg-gray-300 text-white rounded-lg transition-colors"
                    >
                      <AlertTriangle className="w-4 h-4" />
                      Use Fallback OCR
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {diagnosticLog.length > 0 && (
              <div className="bg-gray-900 p-4 border-t border-red-300">
                <p className="text-xs font-semibold text-gray-300 mb-2">Diagnostic Log:</p>
                <div className="bg-black rounded p-3 max-h-40 overflow-y-auto">
                  {diagnosticLog.map((log, i) => (
                    <p key={i} className="text-xs text-green-400 font-mono">{log}</p>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {usedFallback && !error && (
          <div className="mb-6 p-4 bg-orange-50 border-l-4 border-orange-500 rounded-lg">
            <div className="flex items-start gap-3">
              <AlertTriangle className="w-5 h-5 text-orange-600 flex-shrink-0" />
              <div>
                <p className="text-orange-800 font-semibold">Processed with Fallback OCR</p>
                <p className="text-sm text-orange-700 mt-1">
                  OpenAI GPT-4 Vision was unavailable, so we used Tesseract OCR. Results may be less accurate.
                </p>
              </div>
            </div>
          </div>
        )}

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-800 mb-4">Step 1: Upload Sales Data (PowerBI Items)</h2>
          <p className="text-sm text-gray-600 mb-4">Upload up to 3 weeks of sales data files to extract PowerBI items for matching</p>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {(['week1', 'week2', 'week3'] as const).map((weekKey) => (
              <div key={weekKey} className="border border-gray-300 rounded-lg p-4">
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {weekKey.replace('week', 'Week ')}
                </label>
                <input
                  type="file"
                  accept=".xlsx,.xls"
                  onChange={(e) => handleSalesFileSelect(weekKey, e.target.files?.[0] || null)}
                  className="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                />
                {salesFiles[weekKey] && (
                  <p className="text-xs text-green-600 mt-2">✓ {salesFiles[weekKey]!.name}</p>
                )}
              </div>
            ))}
          </div>

          <button
            onClick={parseSalesData}
            disabled={Object.keys(salesFiles).length === 0 || parsingSales}
            className="mt-4 w-full px-4 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-300 text-white font-semibold rounded-lg transition-colors flex items-center justify-center gap-2"
          >
            {parsingSales ? (
              <>
                <Loader className="w-5 h-5 animate-spin" />
                Parsing Sales Data...
              </>
            ) : (
              <>
                <TrendingUp className="w-5 h-5" />
                Parse Sales Data
              </>
            )}
          </button>

          {salesData && (
            <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
              <p className="text-sm font-semibold text-green-900">✓ Sales Data Loaded</p>
              <p className="text-xs text-green-700 mt-1">
                {salesData.uniqueItems.length} unique PowerBI items from {salesData.weeks} week(s) ({salesData.totalItems} total records)
              </p>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Step 2: Upload Production Plan Image</h2>

            <div className="mb-4">
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Select Site
              </label>
              <select
                value={selectedSite}
                onChange={(e) => setSelectedSite(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Choose a site...</option>
                {sites.map(site => (
                  <option key={site.id} value={site.id}>{site.name}</option>
                ))}
              </select>
            </div>

            <div className="mb-4">
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Upload Image
              </label>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-500 transition-colors">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageSelect}
                  className="hidden"
                  id="image-upload"
                />
                <label htmlFor="image-upload" className="cursor-pointer">
                  <Upload className="w-12 h-12 text-gray-400 mx-auto mb-3" />
                  <p className="text-gray-600 font-medium">Click to upload or drag and drop</p>
                  <p className="text-sm text-gray-500 mt-1">PNG, JPG up to 10MB</p>
                </label>
              </div>
            </div>

            {imagePreview && (
              <div className="mb-4">
                <p className="text-sm font-semibold text-gray-700 mb-2">Preview:</p>
                <img src={imagePreview} alt="Preview" className="w-full h-64 object-contain border border-gray-200 rounded-lg" />
              </div>
            )}

            <button
              onClick={processImage}
              disabled={!imageFile || !selectedSite || !salesData || isProcessing}
              className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed text-white font-semibold py-3 rounded-lg transition-colors flex items-center justify-center gap-2"
            >
              {isProcessing ? (
                <>
                  <Loader className="w-5 h-5 animate-spin" />
                  Processing...
                </>
              ) : (
                <>
                  <Camera className="w-5 h-5" />
                  Process Image
                </>
              )}
            </button>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Processing Status</h2>

            {!isProcessing && !showResults && (
              <div className="text-center py-12 text-gray-400">
                <Camera className="w-16 h-16 mx-auto mb-4 opacity-50" />
                <p>Upload an image to begin processing</p>
              </div>
            )}

            {isProcessing && (
              <div className="space-y-4">
                <div className="flex items-center gap-3 text-blue-600">
                  <Loader className="w-6 h-6 animate-spin" />
                  <span className="font-medium">{processingStage}</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div
                    className="bg-blue-600 h-3 rounded-full transition-all duration-500"
                    style={{ width: `${progress}%` }}
                  />
                </div>
                <p className="text-sm text-gray-600 text-center">{progress}% complete</p>
              </div>
            )}

            {showResults && productionMatches.length > 0 && (
              <div className="space-y-4">
                <div className="flex items-center gap-2 text-green-600 mb-4">
                  <CheckCircle className="w-6 h-6" />
                  <span className="font-semibold text-lg">Processing Complete!</span>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <CheckCircle className="w-5 h-5 text-green-600" />
                      <span className="text-sm font-semibold text-gray-700">Matched</span>
                    </div>
                    <p className="text-3xl font-bold text-green-600">
                      {productionMatches.filter(m => m.status === 'matched').length}
                    </p>
                  </div>

                  <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertCircle className="w-5 h-5 text-amber-600" />
                      <span className="text-sm font-semibold text-gray-700">Needs Review</span>
                    </div>
                    <p className="text-3xl font-bold text-amber-600">
                      {productionMatches.filter(m => m.status === 'needs_review').length}
                    </p>
                  </div>

                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 col-span-2">
                    <div className="flex items-center gap-2 mb-2">
                      <TrendingUp className="w-5 h-5 text-blue-600" />
                      <span className="text-sm font-semibold text-gray-700">Match Rate</span>
                    </div>
                    <p className="text-3xl font-bold text-blue-600">
                      {((productionMatches.filter(m => m.status === 'matched').length / productionMatches.length) * 100).toFixed(1)}%
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {showResults && productionMatches.length > 0 && (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Matched Items with PowerBI Data</h2>

            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">OCR Item</th>
                    <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Qty</th>
                    <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">PowerBI Match</th>
                    <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Confidence</th>
                    <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Variations</th>
                    <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Price</th>
                    <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Total Cost</th>
                    <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Status</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {productionMatches.map((match, index) => (
                    <tr key={index} className={match.status === 'needs_review' ? 'bg-amber-50' : ''}>
                      <td className="px-4 py-3 text-sm text-gray-900">{match.ocrItem}</td>
                      <td className="px-4 py-3 text-sm font-semibold text-gray-900">{match.ocrQuantity}</td>
                      <td className="px-4 py-3 text-sm text-gray-700">{match.powerBIItem || <span className="text-red-500">No match</span>}</td>
                      <td className="px-4 py-3 text-sm">
                        <span className={`font-semibold ${
                          match.confidence >= 85 ? 'text-green-600' :
                          match.confidence >= 70 ? 'text-amber-600' :
                          'text-red-600'
                        }`}>
                          {match.confidence.toFixed(1)}%
                        </span>
                      </td>
                      <td className="px-4 py-3 text-sm">
                        {match.variations.length > 1 && (
                          <details className="cursor-pointer">
                            <summary className="text-blue-600 hover:text-blue-700">{match.variations.length} variations</summary>
                            <ul className="mt-2 space-y-1 text-xs bg-gray-50 p-2 rounded">
                              {match.variations.map((v, i) => (
                                <li key={i} className="flex justify-between">
                                  <span>{v.powerBIItem}</span>
                                  <span className="text-gray-500">{v.confidence.toFixed(1)}%</span>
                                </li>
                              ))}
                            </ul>
                          </details>
                        )}
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-900">
                        {match.avgPrice ? `£${match.avgPrice.toFixed(2)}` : '-'}
                      </td>
                      <td className="px-4 py-3 text-sm font-semibold text-gray-900">
                        {match.totalCost ? `£${match.totalCost.toFixed(2)}` : '-'}
                      </td>
                      <td className="px-4 py-3 text-sm">
                        {match.status === 'matched' && (
                          <span className="px-2 py-1 text-xs font-semibold bg-green-100 text-green-800 rounded">Matched</span>
                        )}
                        {match.status === 'needs_review' && (
                          <span className="px-2 py-1 text-xs font-semibold bg-amber-100 text-amber-800 rounded">Review</span>
                        )}
                        {match.status === 'unmatched' && (
                          <span className="px-2 py-1 text-xs font-semibold bg-red-100 text-red-800 rounded">Unmatched</span>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm font-semibold text-blue-900 mb-2">Total Production Cost Estimate</p>
              <p className="text-2xl font-bold text-blue-700">
                £{productionMatches.reduce((sum, m) => sum + (m.totalCost || 0), 0).toFixed(2)}
              </p>
              <p className="text-xs text-blue-700 mt-1">Based on 85% reduced pricing from sales data</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
